Принцип единственной ответственности (SRP, Single Responsibility Principle) — это один из пяти принципов SOLID в объектно-ориентированном программировании. Он гласит:
У класса должна быть только одна причина для изменения.
Это значит, что класс должен отвечать только за одну часть функциональности системы. Если класс делает слишком много (например, обрабатывает бизнес-логику, сохраняет данные и управляет UI), его будет сложно поддерживать, тестировать и изменять без риска поломки других частей.

Понятие актора (или «actor») в SRP ввел Роберт Мартин («Дядюшка Боб»). Он пояснил, что:
Ответственность — это причина для изменения, а актор — это заинтересованная сторона(stakeholder), которая инициирует это изменение.
Другими словами:
Каждый актор (например, пользователь, админ, бухгалтер, внешний API и т. п.) взаимодействует с системой определённым образом.
Если класс обслуживает разные акторы, то он имеет несколько причин для изменений — и нарушает SRP.

Stakeholder = тот, кто влияет на систему и её развитие, но может не взаимодействовать с системой.
→ ✅ Важен для SRP, потому что он — источник изменений.

Actor = тот, кто взаимодействует с системой.
→ Может быть stakeholder’ом, но не обязательно. Задает причины изменений.


В качестве примера нарушения SRP часто приводят ActiveRecord — паттерн, который позволяет легко связать данные объектов и данные из базы данных. В ActiveRecord много ответственностей сконцентрировано в одном месте и поэтому можно утверждать, что ActiveRecord нарушает SRP и тем самым становится антипаттерном. В некоторых случаях это утверждение спорно, так как сам по себе объект, реализующий ActiveRecord, не содержащий никакой бизнес логики, а предоставляющий таблицу из базы данных, имеет лишь одну причину для изменения (изменение таблицы), что не противоречит определением принципа SRP